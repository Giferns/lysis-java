new MaxClients;
new NULL_STRING;
new NULL_VECTOR;
public Extension:__ext_SteamWorks =
{
	name = "SteamWorks",
	file = "SteamWorks.ext",
	autoload = 1,
	required = 0,
};
public Extension:__ext_TAU_LIB =
{
	name = "TAU_LIB",
	file = "TAU_LIB.ext",
	autoload = 1,
	required = 0,
};
public Extension:__ext_core =
{
	name = "Core",
	file = "core",
	autoload = 0,
	required = 0,
};
public PlVers:__version =
{
	version = 5,
	filevers = "1.8.0.5914",
	date = "06/16/2018",
	time = "08:02:59"
};
public Plugin:myinfo =
{
	name = "Token Auto Updater",
	description = "",
	author = "Phoenix (˙·٠●Феникс●٠·˙)",
	version = "1.4",
	url = "tau.gg"
};
new g_varfb4;
new g_varfc4;
new g_varfb8;
new g_varfbc;
new g_varfc0;
new g_var1200;
new g_varfb0;
public ConVarChanged(_arg0, _arg1, _arg2)
{
	if (_arg2 != 48)
	{
		ConVar.SetInt(_arg0, 0, 0, 0);
	}
	return 0;
}

public GetResult(_arg0)
{
	if (strlen(_arg0) != 32)
	{
		sub_27bc(8);

/* ERROR! Can't print expression: Heap */
 function "GetResult" (number 1)

public HTTPComplete(_arg0, _arg1, _arg2, _arg3)
{
	if (_arg3 == 200)
	{
		SteamWorks_GetHTTPResponseBodyCallback(_arg0, 3, 0, 0);
	}
	else
	{
		sub_27bc(7);

/* ERROR! Can't print expression: Heap */
 function "HTTPComplete" (number 2)

public OnPluginStart()
{
	new var1;
	var1 = FindConVar("sv_hibernate_when_empty");
	HookConVarChange(var1, 1);
	ConVar.SetInt(var1, 0, 0, 0);
	g_varfb4 = KeyValues.KeyValues("config", 4072, 4076);
	if (!KeyValues.ImportFromFile(g_varfb4, "token_auto_updater/config.ini"))
	{
		LogToFile("token_auto_updater/tau.log", "config.ini not found");
		SetFailState("[Token Auto Updater] config.ini not found");
		return 0;
	}
	KeyValues.GetString(g_varfb4, "Language", 3912, 38, "NULL");
	if (sub_b68(3912, "RU", 1))
	{
		g_varfc4 = 0;
	}
	else
	{
		if (sub_b68(3912, "EN", 1))
		{
			g_varfc4 = 1;
		}
		LogToFile("token_auto_updater/tau.log", "Language parameter is incorrect - %s", 3912);
		SetFailState("[Token Auto Updater] Language parameter is incorrect - %s", 3912);
		return 0;
	}
	if (!LibraryExists("SteamWorks"))
	{
		sub_27bc(0);

/* ERROR! Can't print expression: Heap */
 function "OnPluginStart" (number 3)

public SetToken()
{
	if (g_varfbc)
	{
		if (0 < g_varfb8)
		{
			TAU_LIB_1(3776);
			CreateTimer(1065353216, 21, 0, 1);
			sub_27bc(11);

/* ERROR! Can't print expression: Heap */
 function "SetToken" (number 4)

public SteamWorks_SteamServersConnectFailure(_arg0)
{
	sub_25cc(_arg0);
	return 0;
}

public SteamWorks_SteamServersConnected()
{
	if (!g_var1200)
	{
		if ((g_var1200 = SteamWorks_GetPublicIPCell()))
		{
			sub_2188();
			Format(3812, "GetFeatureStatus", "key=%s&ver=140&lang=%d&ip=%d.%d.%d.%d:%d", 3812, g_varfc4, g_var1200 >>> 24 & 255, g_var1200 >>> 16 & 255, g_var1200 >>> 8 & 255, g_var1200 & 255, ConVar.IntValue.get(FindConVar("hostport")));
			FormatEx(3952, NULL_STRING, "token_auto_updater/%s.log", 3812 + 53);
			3952[sub_b9c(3952, 58, 0)] = 95;
			sub_27bc(6);

/* ERROR! Can't print expression: Heap */
 function "SteamWorks_SteamServersConnected" (number 6)

public SteamWorks_SteamServersDisconnected(_arg0)
{
	sub_25cc(_arg0);
	return 0;
}

public TimerGetNewToken()
{
	TAU_LIB_2();
	SteamWorks_SteamServersConnected();
	sub_27bc(15);

/* ERROR! Can't print expression: Heap */
 function "TimerGetNewToken" (number 8)

public TimerRequestT()
{
	SteamWorks_SteamServersConnected();
	return 0;
}

public UpdateSession()
{
	new var1;
	if (TAU_LIB_3())
	{
		var1 = 4;
	}
	else
	{
		var1 = 0;
	}
	return var1;
}

public __ext_SteamWorks_SetNTVOptional()
{
	MarkNativeAsOptional("SteamWorks_IsVACEnabled");
	MarkNativeAsOptional("SteamWorks_GetPublicIP");
	MarkNativeAsOptional("SteamWorks_GetPublicIPCell");
	MarkNativeAsOptional("SteamWorks_IsLoaded");
	MarkNativeAsOptional("SteamWorks_SetGameDescription");
	MarkNativeAsOptional("SteamWorks_IsConnected");
	MarkNativeAsOptional("SteamWorks_SetRule");
	MarkNativeAsOptional("SteamWorks_ClearRules");
	MarkNativeAsOptional("SteamWorks_ForceHeartbeat");
	MarkNativeAsOptional("SteamWorks_GetUserGroupStatus");
	MarkNativeAsOptional("SteamWorks_GetUserGroupStatusAuthID");
	MarkNativeAsOptional("SteamWorks_HasLicenseForApp");
	MarkNativeAsOptional("SteamWorks_HasLicenseForAppId");
	MarkNativeAsOptional("SteamWorks_GetClientSteamID");
	MarkNativeAsOptional("SteamWorks_RequestStatsAuthID");
	MarkNativeAsOptional("SteamWorks_RequestStats");
	MarkNativeAsOptional("SteamWorks_GetStatCell");
	MarkNativeAsOptional("SteamWorks_GetStatAuthIDCell");
	MarkNativeAsOptional("SteamWorks_GetStatFloat");
	MarkNativeAsOptional("SteamWorks_GetStatAuthIDFloat");
	MarkNativeAsOptional("SteamWorks_SendMessageToGC");
	MarkNativeAsOptional("SteamWorks_CreateHTTPRequest");
	MarkNativeAsOptional("SteamWorks_SetHTTPRequestContextValue");
	MarkNativeAsOptional("SteamWorks_SetHTTPRequestNetworkActivityTimeout");
	MarkNativeAsOptional("SteamWorks_SetHTTPRequestHeaderValue");
	MarkNativeAsOptional("SteamWorks_SetHTTPRequestGetOrPostParameter");
	MarkNativeAsOptional("SteamWorks_SetHTTPCallbacks");
	MarkNativeAsOptional("SteamWorks_SendHTTPRequest");
	MarkNativeAsOptional("SteamWorks_SendHTTPRequestAndStreamResponse");
	MarkNativeAsOptional("SteamWorks_DeferHTTPRequest");
	MarkNativeAsOptional("SteamWorks_PrioritizeHTTPRequest");
	MarkNativeAsOptional("SteamWorks_GetHTTPResponseHeaderSize");
	MarkNativeAsOptional("SteamWorks_GetHTTPResponseHeaderValue");
	MarkNativeAsOptional("SteamWorks_GetHTTPResponseBodySize");
	MarkNativeAsOptional("SteamWorks_GetHTTPResponseBodyData");
	MarkNativeAsOptional("SteamWorks_GetHTTPStreamingResponseBodyData");
	MarkNativeAsOptional("SteamWorks_GetHTTPDownloadProgressPct");
	MarkNativeAsOptional("SteamWorks_SetHTTPRequestRawPostBody");
	MarkNativeAsOptional("SteamWorks_GetHTTPResponseBodyCallback");
	MarkNativeAsOptional("SteamWorks_WriteHTTPResponseBodyToFile");
	return 0;
}

public __ext_TAU_LIB_SetNTVOptional()
{
	MarkNativeAsOptional("TAU_LIB_1");
	MarkNativeAsOptional("TAU_LIB_2");
	MarkNativeAsOptional("TAU_LIB_3");
	MarkNativeAsOptional("TAU_LIB_VER");
	return 0;
}

public __ext_core_SetNTVOptional()
{
	MarkNativeAsOptional("GetFeatureStatus");
	MarkNativeAsOptional("RequireFeature");
	MarkNativeAsOptional("AddCommandListener");
	MarkNativeAsOptional("RemoveCommandListener");
	MarkNativeAsOptional("BfWriteBool");
	MarkNativeAsOptional("BfWriteByte");
	MarkNativeAsOptional("BfWriteChar");
	MarkNativeAsOptional("BfWriteShort");
	MarkNativeAsOptional("BfWriteWord");
	MarkNativeAsOptional("BfWriteNum");
	MarkNativeAsOptional("BfWriteFloat");
	MarkNativeAsOptional("BfWriteString");
	MarkNativeAsOptional("BfWriteEntity");
	MarkNativeAsOptional("BfWriteAngle");
	MarkNativeAsOptional("BfWriteCoord");
	MarkNativeAsOptional("BfWriteVecCoord");
	MarkNativeAsOptional("BfWriteVecNormal");
	MarkNativeAsOptional("BfWriteAngles");
	MarkNativeAsOptional("BfReadBool");
	MarkNativeAsOptional("BfReadByte");
	MarkNativeAsOptional("BfReadChar");
	MarkNativeAsOptional("BfReadShort");
	MarkNativeAsOptional("BfReadWord");
	MarkNativeAsOptional("BfReadNum");
	MarkNativeAsOptional("BfReadFloat");
	MarkNativeAsOptional("BfReadString");
	MarkNativeAsOptional("BfReadEntity");
	MarkNativeAsOptional("BfReadAngle");
	MarkNativeAsOptional("BfReadCoord");
	MarkNativeAsOptional("BfReadVecCoord");
	MarkNativeAsOptional("BfReadVecNormal");
	MarkNativeAsOptional("BfReadAngles");
	MarkNativeAsOptional("BfGetNumBytesLeft");
	MarkNativeAsOptional("BfWrite.WriteBool");
	MarkNativeAsOptional("BfWrite.WriteByte");
	MarkNativeAsOptional("BfWrite.WriteChar");
	MarkNativeAsOptional("BfWrite.WriteShort");
	MarkNativeAsOptional("BfWrite.WriteWord");
	MarkNativeAsOptional("BfWrite.WriteNum");
	MarkNativeAsOptional("BfWrite.WriteFloat");
	MarkNativeAsOptional("BfWrite.WriteString");
	MarkNativeAsOptional("BfWrite.WriteEntity");
	MarkNativeAsOptional("BfWrite.WriteAngle");
	MarkNativeAsOptional("BfWrite.WriteCoord");
	MarkNativeAsOptional("BfWrite.WriteVecCoord");
	MarkNativeAsOptional("BfWrite.WriteVecNormal");
	MarkNativeAsOptional("BfWrite.WriteAngles");
	MarkNativeAsOptional("BfRead.ReadBool");
	MarkNativeAsOptional("BfRead.ReadByte");
	MarkNativeAsOptional("BfRead.ReadChar");
	MarkNativeAsOptional("BfRead.ReadShort");
	MarkNativeAsOptional("BfRead.ReadWord");
	MarkNativeAsOptional("BfRead.ReadNum");
	MarkNativeAsOptional("BfRead.ReadFloat");
	MarkNativeAsOptional("BfRead.ReadString");
	MarkNativeAsOptional("BfRead.ReadEntity");
	MarkNativeAsOptional("BfRead.ReadAngle");
	MarkNativeAsOptional("BfRead.ReadCoord");
	MarkNativeAsOptional("BfRead.ReadVecCoord");
	MarkNativeAsOptional("BfRead.ReadVecNormal");
	MarkNativeAsOptional("BfRead.ReadAngles");
	MarkNativeAsOptional("BfRead.GetNumBytesLeft");
	MarkNativeAsOptional("PbReadInt");
	MarkNativeAsOptional("PbReadFloat");
	MarkNativeAsOptional("PbReadBool");
	MarkNativeAsOptional("PbReadString");
	MarkNativeAsOptional("PbReadColor");
	MarkNativeAsOptional("PbReadAngle");
	MarkNativeAsOptional("PbReadVector");
	MarkNativeAsOptional("PbReadVector2D");
	MarkNativeAsOptional("PbGetRepeatedFieldCount");
	MarkNativeAsOptional("PbSetInt");
	MarkNativeAsOptional("PbSetFloat");
	MarkNativeAsOptional("PbSetBool");
	MarkNativeAsOptional("PbSetString");
	MarkNativeAsOptional("PbSetColor");
	MarkNativeAsOptional("PbSetAngle");
	MarkNativeAsOptional("PbSetVector");
	MarkNativeAsOptional("PbSetVector2D");
	MarkNativeAsOptional("PbAddInt");
	MarkNativeAsOptional("PbAddFloat");
	MarkNativeAsOptional("PbAddBool");
	MarkNativeAsOptional("PbAddString");
	MarkNativeAsOptional("PbAddColor");
	MarkNativeAsOptional("PbAddAngle");
	MarkNativeAsOptional("PbAddVector");
	MarkNativeAsOptional("PbAddVector2D");
	MarkNativeAsOptional("PbRemoveRepeatedFieldValue");
	MarkNativeAsOptional("PbReadMessage");
	MarkNativeAsOptional("PbReadRepeatedMessage");
	MarkNativeAsOptional("PbAddMessage");
	MarkNativeAsOptional("Protobuf.ReadInt");
	MarkNativeAsOptional("Protobuf.ReadFloat");
	MarkNativeAsOptional("Protobuf.ReadBool");
	MarkNativeAsOptional("Protobuf.ReadString");
	MarkNativeAsOptional("Protobuf.ReadColor");
	MarkNativeAsOptional("Protobuf.ReadAngle");
	MarkNativeAsOptional("Protobuf.ReadVector");
	MarkNativeAsOptional("Protobuf.ReadVector2D");
	MarkNativeAsOptional("Protobuf.GetRepeatedFieldCount");
	MarkNativeAsOptional("Protobuf.SetInt");
	MarkNativeAsOptional("Protobuf.SetFloat");
	MarkNativeAsOptional("Protobuf.SetBool");
	MarkNativeAsOptional("Protobuf.SetString");
	MarkNativeAsOptional("Protobuf.SetColor");
	MarkNativeAsOptional("Protobuf.SetAngle");
	MarkNativeAsOptional("Protobuf.SetVector");
	MarkNativeAsOptional("Protobuf.SetVector2D");
	MarkNativeAsOptional("Protobuf.AddInt");
	MarkNativeAsOptional("Protobuf.AddFloat");
	MarkNativeAsOptional("Protobuf.AddBool");
	MarkNativeAsOptional("Protobuf.AddString");
	MarkNativeAsOptional("Protobuf.AddColor");
	MarkNativeAsOptional("Protobuf.AddAngle");
	MarkNativeAsOptional("Protobuf.AddVector");
	MarkNativeAsOptional("Protobuf.AddVector2D");
	MarkNativeAsOptional("Protobuf.RemoveRepeatedFieldValue");
	MarkNativeAsOptional("Protobuf.ReadMessage");
	MarkNativeAsOptional("Protobuf.ReadRepeatedMessage");
	MarkNativeAsOptional("Protobuf.AddMessage");
	VerifyCoreVersion();
	return 0;
}

sub_27bc(_arg0, _arg1)
{
	new var1 = 4836[g_varfc4][_arg0];
	return var1;
}

sub_2188()
{
	if (g_varfb0)
	{
		KillTimer(g_varfb0, 0);
		g_varfb0 = 0;
	}
	return 0;
}

sub_b68(_arg0, _arg1, _arg2)
{
	return strcmp(_arg0, _arg1, _arg2) == 0;
}

sub_25cc(_arg0)
{
	switch (_arg0)
	{
		case 1:
		{
			if (!g_varfc0)
			{
				CreateTimer(1069547520, 9, 0, 0);
			}
		}
		case 102:
		{
			if (!g_varfbc)
			{
				g_varfbc = 1;
				CreateTimer(GetRandomFloat(1108082688, 1110704128), 17, 0, 0);
				sub_27bc(14);

/* ERROR! Can't print expression: Heap */
 function "sub_25cc" (number 17)

sub_b9c(_arg0, _arg1, _arg2)
{
	new var1;
	var1 = strlen(_arg0);
	if (!_arg2)
	{
		new var2 = 0;
		while (var2 < var1)
		{
			if (_arg1 == _arg0[var2])
			{
				return var2;
			}
			var2++;
		}
	}
	else
	{
		new var3;
		var3 = var1 + -1;
		while (0 <= var3)
		{
			if (_arg1 == _arg0[var3])
			{
				return var3;
			}
			var3--;
		}
	}
	return -1;
}

