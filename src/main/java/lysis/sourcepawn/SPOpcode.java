package lysis.sourcepawn;

public enum SPOpcode {
	invalid, load_pri, load_alt, load_s_pri, load_s_alt, lref_pri, lref_alt, lref_s_pri, lref_s_alt, load_i, lodb_i, const_pri, const_alt, addr_pri, addr_alt, stor_pri, stor_alt, stor_s_pri, stor_s_alt, sref_pri, sref_alt, sref_s_pri, sref_s_alt, stor_i, strb_i, lidx, lidx_b, idxaddr, idxaddr_b, align_pri, align_alt, lctrl, sctrl, move_pri, move_alt, xchg, push_pri, push_alt, push_r, push_c, push, push_s, pop_pri, pop_alt, stack, heap, proc, ret, retn, call, call_pri, jump, jrel, jzer, jnz, jeq, jneq, jless, jleq, jgrtr, jgeq, jsless, jsleq, jsgrtr, jsgeq, shl, shr, sshr, shl_c_pri, shl_c_alt, shr_c_pri, shr_c_alt, smul, sdiv, sdiv_alt, umul, udiv, udiv_alt, add, sub, sub_alt, and, or, xor, not, neg, invert, add_c, smul_c, zero_pri, zero_alt, zero, zero_s, sign_pri, sign_alt, eq, neq, less, leq, grtr, geq, sless, sleq, sgrtr, sgeq, eq_c_pri, eq_c_alt, inc_pri, inc_alt, inc, inc_s, inc_i, dec_pri, dec_alt, dec, dec_s, dec_i, movs, cmps, fill, halt, bounds, sysreq_pri, sysreq_c, file, line, symbol, srange, jump_pri, switch_, casetbl, swap_pri, swap_alt, push_adr, nop, sysreq_n, symtag, dbreak, push2_c, push2, push2_s, push2_adr, push3_c, push3, push3_s, push3_adr, push4_c, push4, push4_s, push4_adr, push5_c, push5, push5_s, push5_adr, load_both, load_s_both, const_, const_s, sysreq_d, sysreq_nd, tracker_push_c, tracker_pop_setheap, genarray, genarray_z, stradjust_pri, stackadjust, endproc, fabs, float_, floatadd, floatsub, floatmul, floatdiv, rnd_to_nearest, rnd_to_floor, rnd_to_ceil, rnd_to_zero, floatcmp, sdiv_alt_mod // placeholder
																																																																																																																																																																																																																																																																																																																																																																																																		// opcode
																																																																																																																																																																																																																																																																																																																																																																																																		// for
																																																																																																																																																																																																																																																																																																																																																																																																		// modulo
																																																																																																																																																																																																																																																																																																																																																																																																		// operation
}
